name: CI

# on안에 정의해준 사항에 따라 하단을 실행한다.
on:
  push:
    branches: main

# env는 deploy.ymld에서 사용할 변수들을 정의한다.
env:
  S3_BUCKET_NAME: rg-7th-bucket
  CODE_DEPLOY_APPLICATION_NAME: rg-7th-cd
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: rg-7th-cd-group

# jobs는 사용자가 실행할 행동들을 모아둔다.    
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x

      # package.json 설치
      # - name: install dependencies
      #   run: npm install

      # 프로젝트 빌드
      # - name: build
      #   run: npm run build

      # 프로젝트 압축
      # deploy 폴더를 만들고
      # code-deploy에서 실행해줄 appspec.yml과 scripts들을 복사해서 넣어준다.
      # 그리고 위에서 빌드한 빌드 파일을 넣은 후 압축을 진행한다.
      - name: mkdir deploy
        run: mkdir deploy

      - name: copy package.json
        run: cp package.json deploy/

      # - name: copy dist file
      #   run: cp -r dist deploy/

      - name: copy src
        run: cp -r src deploy/

      - name: copy ecosystem.config
        run: cp ecosystem.config.js deploy/

      - name: copy nest-cli.json
        run: cp nest-cli.json deploy/

      - name: copy tsconfig.build.config
        run: cp tsconfig.build.config deploy/

      - name: copy tsconfig.json
        run: cp tsconfig.json deploy/

      - name: copy appspec
        run: cp appspec.yml deploy/appspec.yml

      - name: copy script files
        run: cp -r scripts deploy/

      - name: make zip
        run: zip -r $GITHUB_SHA.zip deploy

      # aws 접근 권한 얻기
      - name: get AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # zip 파일을 S3로 업로드
      - name: upload to s3
        run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

      # code deploy 동작
      - name: code deploy
        run: |
          aws deploy create-deployment \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip